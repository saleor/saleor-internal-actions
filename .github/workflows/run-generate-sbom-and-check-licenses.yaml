# Works as follows:
#   1. It generates an SBOM using ./sbom-generator/action.yaml
#      (cdxgen + fetches licenses from NPM, PyPI, etc.)
#   2. It analyzes the SBOM using grant (./grant-license-checker/action.yaml)
name: Generate SBOM and Analyze Licenses

on:
  workflow_call:
    inputs:
      checkout_ref:
        type: string
        required: true
        description: >-
          The project's branch, tag or SHA to checkout and to analyze.
      rules:
        type: string
        required: true
        description: >-
          A list of grant YAML rules (default: deny all GPL licenses).
          More details at: https://github.com/anchore/grant/blob/v0.2.1/README.md#usage.
      ecosystems:
        type: string
        required: true
        description: >-
          The ecosystem list to scan (space or newline separated).
      output_formats:
        type: string
        required: true
        description: >-
          Whitespace separated list of formats for the license summary.
          Valid values: TSV, HTML, TTY.
      output_summary_artifact_name:
        type: string
        required: true
        description: >-
          The artifact name for 'actions/upload-artifact action' to pass
          the grant-summary output across jobs.
      output_sbom_artifact_name:
        type: string
        required: true
        description: >-
          The artifact name for the generated SBOM.
      is_same_repository:
        type: boolean
        default: false
        description: >-
          Whether the workflow is being dispatched from the same GitHub repository
          as the location of this workflow. False if it is another repository.

    outputs:
      check_conclusion:
        description: "Whether the license check passed or failed. One of: pass, fail"
        value: ${{ jobs.analyze-licenses.outputs.check_conclusion }}

permissions:
  contents: read

jobs:
  # 1. Generate an SBOM using cdxgen (CycloneDX generator),
  #    and fetches licenses from PyPI, NPM, etc.
  # 2. Outputs the SBOM JSON file as an artifact.
  generate-sbom:
    name: Generate SBOM and Fetch Licenses
    runs-on: ubuntu-22.04

    permissions:
      contents: read

    steps:
      # Clone the invoker's repository.
      - name: Checkout Caller's Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.checkout_ref }}

      - if: ${{ inputs.is_same_repository }}
        name: Generate SBOM
        uses: ./sbom-generator
        with:
          sbom_path: "./bom.json"
          ecosystems: ${{ inputs.ecosystems }}

      # When not running inside the same repository as the action,
      # use the action version as we cannot access our files inside
      # reusable workflows.
      - if: ${{ !inputs.is_same_repository }}
        name: Generate SBOM
        uses: saleor/saleor-internal-actions/sbom-generator@v1.2.0
        with:
          sbom_path: "./bom.json"
          ecosystems: ${{ inputs.ecosystems }}

      # Send the results to the next job ('analyze-licenses').
      - name: Upload Results
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: ${{ inputs.output_sbom_artifact_name }}
          path: ./bom.json

  # 1. Takes an SBOM as input (artifact),
  # 2. Analyzes it using grant and sends a summary as HTML (error if any
  # rules are violated),
  # 3. Outputs the HTML and JSON results as an artifact.
  analyze-licenses:
    name: Analyze Licenses
    runs-on: ubuntu-22.04

    needs:
      - generate-sbom

    permissions:
      contents: read

    outputs:
      check_conclusion: >-
        ${{
          steps.license-analyzer-self.outputs.check_conclusion
            || steps.license-analyzer-workflow-call.outputs.check_conclusion
        }}

    steps:
      - if: ${{ inputs.is_same_repository }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download SBOM
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ inputs.output_sbom_artifact_name }}
          path: .

      # Prepends the dependency group to the dependency name
      # (as: ".group" + "/" + ".name")
      #
      # This is needed due to a bug in Syft that leads 'grant' to not handle
      # properly dependency groups (e.g., NPM's '@org/pkg-name').
      #
      # Example: the NPM package '@types/node' would be reported by 'grant' as
      # having for name 'node' whereas 'node' and '@types/node` are two
      # (totally) unrelated packages.
      #
      # Ticket: https://github.com/anchore/syft/issues/1202
      - name: Prepend Dependency Group
        run: |
          test -z "${RUNNER_DEBUG+x}" || set -x
          set -eu

          # When .group is not blank, preprend .group into .name (using a slash (/))
          jq '
            (
              .components[] | select ( .group != "" )
            ) |= (
              . + { name: (.group + "/" + .name) }
            )
          ' bom.json > fixed.bom.json

          mv fixed.bom.json bom.json

      - id: license-analyzer-self
        if: ${{ inputs.is_same_repository }}
        name: Analyze Licenses
        uses: ./grant-license-checker
        with:
          rules: ${{ inputs.rules }}
          sbom_path: ./bom.json
          output_formats: ${{ inputs.output_formats }}

      - id: license-analyzer-workflow-call
        if: ${{ !inputs.is_same_repository }}
        name: Analyze Licenses
        uses: saleor/saleor-internal-actions/grant-license-checker@v1.2.0
        with:
          rules: ${{ inputs.rules }}
          sbom_path: ./bom.json
          output_formats: ${{ inputs.output_formats }}

      - name: Upload Analysis Results
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: ${{ inputs.output_summary_artifact_name }}
          path: >-
            ${{ 
                steps.license-analyzer-self.outputs.results_dir_path 
                || steps.license-analyzer-workflow-call.outputs.results_dir_path
            }}
